// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    repositories {
        // 已发布到mavenCentral仓库
        mavenCentral()
    }

    dependencies {
        // aspectj插件
        classpath 'io.github.wurensen:gradle-android-plugin-aspectjx:3.3.2'
        classpath "com.alibaba:arouter-register:1.0.2"
    }
}
plugins {
    id 'com.android.application' version '7.4.2' apply false
    id 'com.android.library' version '7.4.2' apply false
    id 'org.jetbrains.kotlin.android' version '1.8.0' apply false
}
apply from: "$rootDir/config/libraries.gradle"

task clean(type: Delete) {
    delete rootProject.buildDir
}



subprojects{


    def projectName = project.name
    def parent = project.projectDir.parentFile

    //aar不执行下面的操作
    if (projectName.startsWith("aar-"))return

    println "模块:$projectName  父模块$parent.name"



    if (projectName != "app") {
        project.plugins.apply("com.android.library")
    } else {
        project.plugins.apply("com.android.application")

        android{
            defaultConfig{
                applicationId "com.me.xiaomi"
            }
        }

//        def tenantEnable = rootProject.findProperty("tenantEnable")
//        if (tenantEnable!=null&&tenantEnable.equals("true")){
//            android{
//                apply from: "$rootDir/horizontal-tenant/tenant.gradle"
//            }
//        }
    }


    def commonLibs = (ArrayList)libMap.get("common")
    commonLibs.forEach{
        project.dependencies.add("implementation",it)
    }

    //针对单独某个模块的依赖
    def moduleLibs = libMap.get(projectName)
    if (moduleLibs!=null){
        ((ArrayList)moduleLibs).forEach{
            project.dependencies.add("implementation",it)
        }
    }


    switch (projectName){
        case "module-net":
            project.dependencies {
                api project(':module-base')
            }
            break
        case "module-common":
            project.dependencies {
                api project(':module-net')
            }
            break
        case "app":
            project.rootProject.subprojects.forEach(){
                p->
                    if (p.name!="module-base"&&p.name!="module-net"&&p.name!="module-common"&&p.name!="app"){
                        project.dependencies {
                            implementation project(":${p.name}")
                        }
                    }
            }
            break
        case "module-base":
            break

        default:
            project.dependencies {
                api project(':module-common')
            }
            break
    }


    apply from: "$rootDir/module.build.gradle"

}